{"ast":null,"code":"var _jsxFileName = \"/Users/tatsuki/EmployeeManagementSystem/ems/src/UserProfile.tsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\n\n// ユーザー情報を取得するためのセレクターファンクションを定義します。\n// この関数はstateとユーザーIDを引数に取り、対応するユーザーデータを返します。\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst selectUserById = (state, userId) => state.auth.userData.find(user => user[0] === userId);\nfunction UserProfile() {\n  _s();\n  // URLからuserIDを取得\n  const {\n    userId\n  } = useParams();\n\n  // Redux storeからユーザーデータを取得\n  const user = useSelector(state => selectUserById(state, userId));\n\n  // ユーザーデータがまだ取得されていない場合はローディングを表示\n  if (!user) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading user data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 12\n    }, this);\n  }\n\n  // ここにユーザーの詳細情報を表示するコードを書きます\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"User Profile for \", user[1]]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"ID: \", user[0]]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Name: \", user[1]]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Email: \", user[2]]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n}\n_s(UserProfile, \"iG1yHiLr/fIf+mz68gibhu3T1VI=\", false, function () {\n  return [useParams, useSelector];\n});\n_c = UserProfile;\nexport default UserProfile;\nvar _c;\n$RefreshReg$(_c, \"UserProfile\");","map":{"version":3,"names":["React","useParams","useSelector","jsxDEV","_jsxDEV","selectUserById","state","userId","auth","userData","find","user","UserProfile","_s","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tatsuki/EmployeeManagementSystem/ems/src/UserProfile.tsx"],"sourcesContent":["import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\n\n// ユーザー情報を取得するためのセレクターファンクションを定義します。\n// この関数はstateとユーザーIDを引数に取り、対応するユーザーデータを返します。\nconst selectUserById = (state, userId) =>\n  state.auth.userData.find((user) => user[0] === userId);\n\nfunction UserProfile() {\n  // URLからuserIDを取得\n  const { userId } = useParams();\n\n  // Redux storeからユーザーデータを取得\n  const user = useSelector((state) => selectUserById(state, userId));\n\n  // ユーザーデータがまだ取得されていない場合はローディングを表示\n  if (!user) {\n    return <div>Loading user data...</div>;\n  }\n\n  // ここにユーザーの詳細情報を表示するコードを書きます\n  return (\n    <div>\n      <h1>User Profile for {user[1]}</h1>\n      <p>ID: {user[0]}</p>\n      <p>Name: {user[1]}</p>\n      <p>Email: {user[2]}</p>\n      {/* user配列の中の他の情報もこのように表示できます */}\n    </div>\n  );\n}\n\nexport default UserProfile;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,WAAW,QAAQ,aAAa;;AAEzC;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,cAAc,GAAGA,CAACC,KAAK,EAAEC,MAAM,KACnCD,KAAK,CAACE,IAAI,CAACC,QAAQ,CAACC,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAAC,CAAC,CAAC,KAAKJ,MAAM,CAAC;AAExD,SAASK,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACrB;EACA,MAAM;IAAEN;EAAO,CAAC,GAAGN,SAAS,CAAC,CAAC;;EAE9B;EACA,MAAMU,IAAI,GAAGT,WAAW,CAAEI,KAAK,IAAKD,cAAc,CAACC,KAAK,EAAEC,MAAM,CAAC,CAAC;;EAElE;EACA,IAAI,CAACI,IAAI,EAAE;IACT,oBAAOP,OAAA;MAAAU,QAAA,EAAK;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACxC;;EAEA;EACA,oBACEd,OAAA;IAAAU,QAAA,gBACEV,OAAA;MAAAU,QAAA,GAAI,mBAAiB,EAACH,IAAI,CAAC,CAAC,CAAC;IAAA;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACnCd,OAAA;MAAAU,QAAA,GAAG,MAAI,EAACH,IAAI,CAAC,CAAC,CAAC;IAAA;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpBd,OAAA;MAAAU,QAAA,GAAG,QAAM,EAACH,IAAI,CAAC,CAAC,CAAC;IAAA;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtBd,OAAA;MAAAU,QAAA,GAAG,SAAO,EAACH,IAAI,CAAC,CAAC,CAAC;IAAA;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEpB,CAAC;AAEV;AAACL,EAAA,CAtBQD,WAAW;EAAA,QAECX,SAAS,EAGfC,WAAW;AAAA;AAAAiB,EAAA,GALjBP,WAAW;AAwBpB,eAAeA,WAAW;AAAC,IAAAO,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}