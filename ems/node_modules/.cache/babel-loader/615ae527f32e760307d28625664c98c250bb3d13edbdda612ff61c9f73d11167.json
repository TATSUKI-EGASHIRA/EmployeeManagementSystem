{"ast":null,"code":"var _jsxFileName = \"/Users/tatsuki/EmployeeManagementSystem/ems/src/UserProfile.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// ここでユーザーの型を定義します\n\nfunction UserProfile() {\n  _s();\n  const {\n    userId\n  } = useParams();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const response = await fetch(\"https://sheets.googleapis.com/v4/spreadsheets/1yajpuM9YfEqlHgGbDxYVQOcHrFfJYoTho1b1qoOME6Y/values/%E3%82%B7%E3%83%BC%E3%83%881?key=AIzaSyBoGN_ggnHtfZrcL1FX81HSWzQirXL8eyg\");\n        const result = await response.json();\n\n        // JSONデータをログに出力して確認\n        console.log(result);\n\n        // useParamsで取得したuserIdをログに出力して確認\n        console.log(\"UserID from URL:\", userId);\n\n        // JSONデータ内のユーザーIDと一致するものを検索\n        const userData = result.values.find(row => row[0].toString() === userId);\n\n        // 検索結果をログに出力して確認\n        if (userData) {\n          console.log(\"User Data:\", userData);\n          setUser(userData); // ユーザーデータをセットします。\n        } else {\n          console.log(\"User not found.\");\n          setUser(null); // ユーザーが見つからない場合はnullをセット\n        }\n      } catch (error) {\n        console.error(\"Error fetching the data:\", error);\n        setUser(null); // エラーが発生した場合はnullをセット\n      } finally {\n        setLoading(false); // ローディング状態の終了\n      }\n    }\n\n    fetchData();\n  }, [userId]); // 依存配列にuserIdを含める\n\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading user data...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 23\n  }, this);\n  if (!user) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"User not found\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"User Profile\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Name: \", user[1]]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n_s(UserProfile, \"AAtcRp5zw4kgD0nAoHemtUZg/9I=\", false, function () {\n  return [useParams];\n});\n_c = UserProfile;\nexport default UserProfile;\nvar _c;\n$RefreshReg$(_c, \"UserProfile\");","map":{"version":3,"names":["React","useEffect","useState","useParams","jsxDEV","_jsxDEV","UserProfile","_s","userId","user","setUser","loading","setLoading","fetchData","response","fetch","result","json","console","log","userData","values","find","row","toString","error","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tatsuki/EmployeeManagementSystem/ems/src/UserProfile.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\ntype Params = {\n  userId: string;\n};\n\ntype User = string[]; // ここでユーザーの型を定義します\n\nfunction UserProfile() {\n  const { userId } = useParams<Params>();\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const response = await fetch(\n          \"https://sheets.googleapis.com/v4/spreadsheets/1yajpuM9YfEqlHgGbDxYVQOcHrFfJYoTho1b1qoOME6Y/values/%E3%82%B7%E3%83%BC%E3%83%881?key=AIzaSyBoGN_ggnHtfZrcL1FX81HSWzQirXL8eyg\"\n        );\n        const result = await response.json();\n\n        // JSONデータをログに出力して確認\n        console.log(result);\n\n        // useParamsで取得したuserIdをログに出力して確認\n        console.log(\"UserID from URL:\", userId);\n\n        // JSONデータ内のユーザーIDと一致するものを検索\n        const userData = result.values.find(\n          (row: User) => row[0].toString() === userId\n        );\n\n        // 検索結果をログに出力して確認\n        if (userData) {\n          console.log(\"User Data:\", userData);\n          setUser(userData); // ユーザーデータをセットします。\n        } else {\n          console.log(\"User not found.\");\n          setUser(null); // ユーザーが見つからない場合はnullをセット\n        }\n      } catch (error) {\n        console.error(\"Error fetching the data:\", error);\n        setUser(null); // エラーが発生した場合はnullをセット\n      } finally {\n        setLoading(false); // ローディング状態の終了\n      }\n    }\n\n    fetchData();\n  }, [userId]); // 依存配列にuserIdを含める\n\n  if (loading) return <div>Loading user data...</div>;\n  if (!user) return <div>User not found</div>;\n\n  return (\n    <div>\n      <h1>User Profile</h1>\n      <p>Name: {user[1]}</p>{\" \"}\n      {/* userがnullではないことが保証されているので、nullチェックをせずにアクセスします */}\n      {/* その他のユーザー情報を表示 */}\n    </div>\n  );\n}\n\nexport default UserProfile;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAMvB;;AAEtB,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAM;IAAEC;EAAO,CAAC,GAAGL,SAAS,CAAS,CAAC;EACtC,MAAM,CAACM,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAc,IAAI,CAAC;EACnD,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACd,eAAeY,SAASA,CAAA,EAAG;MACzB,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,4KACF,CAAC;QACD,MAAMC,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;;QAEpC;QACAC,OAAO,CAACC,GAAG,CAACH,MAAM,CAAC;;QAEnB;QACAE,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEX,MAAM,CAAC;;QAEvC;QACA,MAAMY,QAAQ,GAAGJ,MAAM,CAACK,MAAM,CAACC,IAAI,CAChCC,GAAS,IAAKA,GAAG,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,KAAKhB,MACvC,CAAC;;QAED;QACA,IAAIY,QAAQ,EAAE;UACZF,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEC,QAAQ,CAAC;UACnCV,OAAO,CAACU,QAAQ,CAAC,CAAC,CAAC;QACrB,CAAC,MAAM;UACLF,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;UAC9BT,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;QACjB;MACF,CAAC,CAAC,OAAOe,KAAK,EAAE;QACdP,OAAO,CAACO,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;QAChDf,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;MACjB,CAAC,SAAS;QACRE,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;MACrB;IACF;;IAEAC,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACL,MAAM,CAAC,CAAC,CAAC,CAAC;;EAEd,IAAIG,OAAO,EAAE,oBAAON,OAAA;IAAAqB,QAAA,EAAK;EAAoB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EACnD,IAAI,CAACrB,IAAI,EAAE,oBAAOJ,OAAA;IAAAqB,QAAA,EAAK;EAAc;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EAE3C,oBACEzB,OAAA;IAAAqB,QAAA,gBACErB,OAAA;MAAAqB,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrBzB,OAAA;MAAAqB,QAAA,GAAG,QAAM,EAACjB,IAAI,CAAC,CAAC,CAAC;IAAA;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAAC,GAAG;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAGvB,CAAC;AAEV;AAACvB,EAAA,CAtDQD,WAAW;EAAA,QACCH,SAAS;AAAA;AAAA4B,EAAA,GADrBzB,WAAW;AAwDpB,eAAeA,WAAW;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}