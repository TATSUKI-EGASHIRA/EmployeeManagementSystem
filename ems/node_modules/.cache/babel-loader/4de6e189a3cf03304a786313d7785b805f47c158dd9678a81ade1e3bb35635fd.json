{"ast":null,"code":"var _jsxFileName = \"/Users/tatsuki/EmployeeManagementSystem/ems/src/components/SideMenu.tsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import { useSelector } from \"react-redux\";\n// import { RootState } from \"../store\";\n// import \"./SideMenu.css\";\n// import CloseIcon from \"@mui/icons-material/Close\";\n// import PersonIcon from \"@mui/icons-material/Person\";\n// import EditIcon from \"@mui/icons-material/Edit\";\n\n// function SideMenu() {\n//   const [isOpen, setIsOpen] = useState(false);\n\n//   // Redux ストアから従業員情報とプロファイル画像URLを取得\n//   const {\n//     employeeNumber,\n//     employeeName,\n//     employeeFurigana,\n//     employeeComment,\n//     employeeImg,\n//   } = useSelector((state: RootState) => {\n//     const userData = state.auth.userData || [];\n//     return {\n//       employeeNumber: userData[0] || \"\",\n//       employeeName: userData[1] || \"\",\n//       employeeFurigana: userData[2] || \"\",\n//       employeeImg: userData[5] || \"/Noimage.png\",\n//       employeeComment: userData[8] || \"\",\n//     };\n//   });\n\n//   const menuWidth = 350; // ここでサイドメニューの幅を定義\n\n//   const toggleMenu = () => {\n//     setIsOpen(!isOpen);\n//   };\n\n//   return (\n//     <>\n//       {/* オーバーレイ */}\n//       {isOpen && (\n//         <div\n//           className=\"overlay\"\n//           onClick={toggleMenu} // オーバーレイをクリックするとメニューが閉じる\n//         />\n//       )}\n\n//       <div className=\"menuToggleArea\">\n//         {/* メニュートグルボタン */}\n//         <button\n//           className=\"menuToggle\"\n//           onClick={toggleMenu}\n//           style={{\n//             left: isOpen ? `${menuWidth}px` : \"0\", // isOpenがtrueならメニューの幅の位置に、falseなら0の位置に\n//           }}\n//         >\n//           {isOpen ? (\n//             <p className=\"toogleText\">\n//               <CloseIcon />\n//               CLOSE\n//             </p>\n//           ) : (\n//             <p className=\"toogleText\">\n//               <PersonIcon />\n//               MY PAGE\n//             </p>\n//           )}\n//         </button>\n\n//         {/* サイドメニュー */}\n//         <div\n//           className=\"sideMenu\"\n//           style={{\n//             width: `${menuWidth}px`, // メニューの幅\n//             transform: isOpen ? \"translateX(0)\" : `translateX(-${menuWidth}px)`, // isOpenがtrueなら表示、falseなら隠す\n//           }}\n//         >\n//           {/* メニューコンテンツ */}\n//           <div className=\"SideProfileContainer\">\n//             <h1 className=\"sideTitle\">Profile</h1>\n//             <div className=\"editBtn\">\n//               <EditIcon />\n//             </div>\n//             <div className=\"profileImageContainer\">\n//               <img className=\"memberFhoto\" src={employeeImg} alt=\"Profile\" />\n//             </div>\n//             <p className=\"employeeNumber\">{employeeNumber}</p>\n//             <p className=\"employeeName\">{employeeName}</p>\n//             <p className=\"employeeFurigana\">{employeeFurigana}</p>\n//             <p className=\"employeeComment\">{employeeComment}</p>\n//           </div>\n//         </div>\n//       </div>\n//     </>\n//   );\n// }\n\n// export default SideMenu;\n\nimport React, { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Button from \"@mui/material/Button\";\nimport TextField from \"@mui/material/TextField\";\nimport SaveIcon from \"@mui/icons-material/Save\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction SideMenu() {\n  _s();\n  const [isEditing, setIsEditing] = useState(false);\n  const [editedComment, setEditedComment] = useState(\"\");\n  // 'profile' の代わりに 'auth' ステートから必要なデータを取得\n  const {\n    employeeNumber,\n    employeeComment\n  } = useSelector(state => state.auth);\n  const handleEditClick = () => {\n    setIsEditing(true);\n    setEditedComment(employeeComment);\n  };\n  const handleSaveClick = async () => {\n    const employeeNumber = profile.employeeNumber; // ログインしているユーザーの社員番号\n    const spreadsheetId = \"1yajpuM9YfEqlHgGbDxYVQOcHrFfJYoTho1b1qoOME6Y\"; // スプレッドシートID\n    const apiKey = \"your_api_key_here\"; // APIキーを入力してください。\n    const range = \"シート1\"; // シート名\n\n    // スプレッドシートAPIのURL\n    const url = `https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}/values/${range}?key=${apiKey}`;\n    try {\n      const response = await fetch(url);\n      const data = await response.json();\n      const rows = data.values;\n\n      // 社員番号で行を検索\n      const rowIndex = rows.findIndex(row => row[0] === employeeNumber);\n      if (rowIndex === -1) {\n        alert(\"User not found\");\n        return;\n      }\n\n      // 更新するセルの範囲\n      const cellRange = `${range}!I${rowIndex + 1}`;\n\n      // スプレッドシートを更新するURL\n      const updateUrl = `https://sheets.googleapis.com/v4/spreadsheets/1yajpuM9YfEqlHgGbDxYVQOcHrFfJYoTho1b1qoOME6Y/values/%E3%82%B7%E3%83%BC%E3%83%881?key=AIzaSyBoGN_ggnHtfZrcL1FX81HSWzQirXL8eyg`;\n      const updateResponse = await fetch(updateUrl, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          values: [[editedComment]] // 更新するデータ\n        })\n      });\n\n      if (!updateResponse.ok) {\n        throw new Error(\"Failed to update spreadsheet\");\n      }\n      setIsEditing(false);\n      alert(\"Comment updated successfully.\");\n    } catch (error) {\n      console.error(\"Error:\", error);\n      alert(\"Failed to update comment.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sideMenu\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"profileSection\",\n      children: isEditing ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          multiline: true,\n          variant: \"outlined\",\n          value: editedComment,\n          onChange: e => setEditedComment(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          startIcon: /*#__PURE__*/_jsxDEV(SaveIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 26\n          }, this),\n          onClick: handleSaveClick,\n          color: \"primary\",\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: profile.employeeComment\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleEditClick,\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 5\n  }, this);\n}\n_s(SideMenu, \"yUHfNI+nIO1gc1leNu32GaKZLCk=\", false, function () {\n  return [useSelector];\n});\n_c = SideMenu;\nexport default SideMenu;\nvar _c;\n$RefreshReg$(_c, \"SideMenu\");","map":{"version":3,"names":["React","useState","useSelector","Button","TextField","SaveIcon","jsxDEV","_jsxDEV","Fragment","_Fragment","SideMenu","_s","isEditing","setIsEditing","editedComment","setEditedComment","employeeNumber","employeeComment","state","auth","handleEditClick","handleSaveClick","profile","spreadsheetId","apiKey","range","url","response","fetch","data","json","rows","values","rowIndex","findIndex","row","alert","cellRange","updateUrl","updateResponse","method","headers","body","JSON","stringify","ok","Error","error","console","className","children","fullWidth","multiline","variant","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","startIcon","onClick","color","_c","$RefreshReg$"],"sources":["/Users/tatsuki/EmployeeManagementSystem/ems/src/components/SideMenu.tsx"],"sourcesContent":["// import React, { useState } from \"react\";\n// import { useSelector } from \"react-redux\";\n// import { RootState } from \"../store\";\n// import \"./SideMenu.css\";\n// import CloseIcon from \"@mui/icons-material/Close\";\n// import PersonIcon from \"@mui/icons-material/Person\";\n// import EditIcon from \"@mui/icons-material/Edit\";\n\n// function SideMenu() {\n//   const [isOpen, setIsOpen] = useState(false);\n\n//   // Redux ストアから従業員情報とプロファイル画像URLを取得\n//   const {\n//     employeeNumber,\n//     employeeName,\n//     employeeFurigana,\n//     employeeComment,\n//     employeeImg,\n//   } = useSelector((state: RootState) => {\n//     const userData = state.auth.userData || [];\n//     return {\n//       employeeNumber: userData[0] || \"\",\n//       employeeName: userData[1] || \"\",\n//       employeeFurigana: userData[2] || \"\",\n//       employeeImg: userData[5] || \"/Noimage.png\",\n//       employeeComment: userData[8] || \"\",\n//     };\n//   });\n\n//   const menuWidth = 350; // ここでサイドメニューの幅を定義\n\n//   const toggleMenu = () => {\n//     setIsOpen(!isOpen);\n//   };\n\n//   return (\n//     <>\n//       {/* オーバーレイ */}\n//       {isOpen && (\n//         <div\n//           className=\"overlay\"\n//           onClick={toggleMenu} // オーバーレイをクリックするとメニューが閉じる\n//         />\n//       )}\n\n//       <div className=\"menuToggleArea\">\n//         {/* メニュートグルボタン */}\n//         <button\n//           className=\"menuToggle\"\n//           onClick={toggleMenu}\n//           style={{\n//             left: isOpen ? `${menuWidth}px` : \"0\", // isOpenがtrueならメニューの幅の位置に、falseなら0の位置に\n//           }}\n//         >\n//           {isOpen ? (\n//             <p className=\"toogleText\">\n//               <CloseIcon />\n//               CLOSE\n//             </p>\n//           ) : (\n//             <p className=\"toogleText\">\n//               <PersonIcon />\n//               MY PAGE\n//             </p>\n//           )}\n//         </button>\n\n//         {/* サイドメニュー */}\n//         <div\n//           className=\"sideMenu\"\n//           style={{\n//             width: `${menuWidth}px`, // メニューの幅\n//             transform: isOpen ? \"translateX(0)\" : `translateX(-${menuWidth}px)`, // isOpenがtrueなら表示、falseなら隠す\n//           }}\n//         >\n//           {/* メニューコンテンツ */}\n//           <div className=\"SideProfileContainer\">\n//             <h1 className=\"sideTitle\">Profile</h1>\n//             <div className=\"editBtn\">\n//               <EditIcon />\n//             </div>\n//             <div className=\"profileImageContainer\">\n//               <img className=\"memberFhoto\" src={employeeImg} alt=\"Profile\" />\n//             </div>\n//             <p className=\"employeeNumber\">{employeeNumber}</p>\n//             <p className=\"employeeName\">{employeeName}</p>\n//             <p className=\"employeeFurigana\">{employeeFurigana}</p>\n//             <p className=\"employeeComment\">{employeeComment}</p>\n//           </div>\n//         </div>\n//       </div>\n//     </>\n//   );\n// }\n\n// export default SideMenu;\n\nimport React, { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../store\";\nimport Button from \"@mui/material/Button\";\nimport TextField from \"@mui/material/TextField\";\nimport SaveIcon from \"@mui/icons-material/Save\";\n\nfunction SideMenu() {\n  const [isEditing, setIsEditing] = useState(false);\n  const [editedComment, setEditedComment] = useState(\"\");\n  // 'profile' の代わりに 'auth' ステートから必要なデータを取得\n  const { employeeNumber, employeeComment } = useSelector(\n    (state: RootState) => state.auth\n  );\n\n  const handleEditClick = () => {\n    setIsEditing(true);\n    setEditedComment(employeeComment);\n  };\n\n  const handleSaveClick = async () => {\n    const employeeNumber = profile.employeeNumber; // ログインしているユーザーの社員番号\n    const spreadsheetId = \"1yajpuM9YfEqlHgGbDxYVQOcHrFfJYoTho1b1qoOME6Y\"; // スプレッドシートID\n    const apiKey = \"your_api_key_here\"; // APIキーを入力してください。\n    const range = \"シート1\"; // シート名\n\n    // スプレッドシートAPIのURL\n    const url = `https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}/values/${range}?key=${apiKey}`;\n\n    try {\n      const response = await fetch(url);\n      const data = await response.json();\n      const rows = data.values;\n\n      // 社員番号で行を検索\n      const rowIndex = rows.findIndex((row) => row[0] === employeeNumber);\n      if (rowIndex === -1) {\n        alert(\"User not found\");\n        return;\n      }\n\n      // 更新するセルの範囲\n      const cellRange = `${range}!I${rowIndex + 1}`;\n\n      // スプレッドシートを更新するURL\n      const updateUrl = `https://sheets.googleapis.com/v4/spreadsheets/1yajpuM9YfEqlHgGbDxYVQOcHrFfJYoTho1b1qoOME6Y/values/%E3%82%B7%E3%83%BC%E3%83%881?key=AIzaSyBoGN_ggnHtfZrcL1FX81HSWzQirXL8eyg`;\n\n      const updateResponse = await fetch(updateUrl, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          values: [[editedComment]], // 更新するデータ\n        }),\n      });\n\n      if (!updateResponse.ok) {\n        throw new Error(\"Failed to update spreadsheet\");\n      }\n\n      setIsEditing(false);\n      alert(\"Comment updated successfully.\");\n    } catch (error) {\n      console.error(\"Error:\", error);\n      alert(\"Failed to update comment.\");\n    }\n  };\n\n  return (\n    <div className=\"sideMenu\">\n      {/* ... 既存のマークアップ ... */}\n      <div className=\"profileSection\">\n        {isEditing ? (\n          <>\n            <TextField\n              fullWidth\n              multiline\n              variant=\"outlined\"\n              value={editedComment}\n              onChange={(e) => setEditedComment(e.target.value)}\n            />\n            <Button\n              startIcon={<SaveIcon />}\n              onClick={handleSaveClick}\n              color=\"primary\"\n            >\n              Save\n            </Button>\n          </>\n        ) : (\n          <>\n            <p>{profile.employeeComment}</p>\n            <Button onClick={handleEditClick}>Edit</Button>\n          </>\n        )}\n      </div>\n      {/* ... 既存のマークアップ ... */}\n    </div>\n  );\n}\n\nexport default SideMenu;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}