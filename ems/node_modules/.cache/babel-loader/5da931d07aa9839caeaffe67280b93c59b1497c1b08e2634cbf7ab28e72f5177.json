{"ast":null,"code":"var _jsxFileName = \"/Users/tatsuki/EmployeeManagementSystem/ems/src/components/googleLogin.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CLIENT_ID = \"592132542563-mebnha0jv0i0a4li6rvhnrqtgu30reef.apps.googleusercontent.com\";\nconst CLIENT_SECRET = \"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\"; // クライアントシークレット\nconst REDIRECT_URI = \"http://localhost:3000/login\";\nconst LoginCallbackPage = () => {\n  _s();\n  const history = useHistory();\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const code = urlParams.get('code');\n    if (code) {\n      fetchAccessToken(code);\n    } else {\n      // 認証コードがない場合はホームにリダイレクト\n      history.push('/');\n    }\n  }, [history]);\n  const fetchAccessToken = async code => {\n    const tokenUrl = `https://oauth2.googleapis.com/token`;\n    const response = await fetch(tokenUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      body: new URLSearchParams({\n        code: code,\n        client_id: CLIENT_ID,\n        client_secret: CLIENT_SECRET,\n        redirect_uri: REDIRECT_URI,\n        grant_type: 'authorization_code'\n      })\n    });\n    const data = await response.json();\n    localStorage.setItem('accessToken', data.access_token);\n\n    // アクセストークン取得後の処理（例：ユーザーページへリダイレクト）\n    history.push('/user');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(LoginCallbackPage, \"bz2N+u0mX89LO9zOCfVCA9Sa20M=\", false, function () {\n  return [useHistory];\n});\n_c = LoginCallbackPage;\nexport default LoginCallbackPage;\nvar _c;\n$RefreshReg$(_c, \"LoginCallbackPage\");","map":{"version":3,"names":["React","useEffect","useHistory","jsxDEV","_jsxDEV","CLIENT_ID","CLIENT_SECRET","REDIRECT_URI","LoginCallbackPage","_s","history","urlParams","URLSearchParams","window","location","search","code","get","fetchAccessToken","push","tokenUrl","response","fetch","method","headers","body","client_id","client_secret","redirect_uri","grant_type","data","json","localStorage","setItem","access_token","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tatsuki/EmployeeManagementSystem/ems/src/components/googleLogin.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nconst CLIENT_ID = \"592132542563-mebnha0jv0i0a4li6rvhnrqtgu30reef.apps.googleusercontent.com\";\nconst CLIENT_SECRET = \"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\"; // クライアントシークレット\nconst REDIRECT_URI = \"http://localhost:3000/login\";\n\nconst LoginCallbackPage: React.FC = () => {\n  const history = useHistory();\n\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const code = urlParams.get('code');\n\n    if (code) {\n      fetchAccessToken(code);\n    } else {\n      // 認証コードがない場合はホームにリダイレクト\n      history.push('/');\n    }\n  }, [history]);\n\n  const fetchAccessToken = async (code: string) => {\n    const tokenUrl = `https://oauth2.googleapis.com/token`;\n    const response = await fetch(tokenUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: new URLSearchParams({\n        code: code,\n        client_id: CLIENT_ID,\n        client_secret: CLIENT_SECRET,\n        redirect_uri: REDIRECT_URI,\n        grant_type: 'authorization_code',\n      }),\n    });\n\n    const data = await response.json();\n    localStorage.setItem('accessToken', data.access_token);\n\n    // アクセストークン取得後の処理（例：ユーザーページへリダイレクト）\n    history.push('/user');\n  };\n\n  return (\n    <div>Loading...</div>\n  );\n};\n\nexport default LoginCallbackPage;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,UAAU,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,SAAS,GAAG,0EAA0E;AAC5F,MAAMC,aAAa,GAAG,qCAAqC,CAAC,CAAC;AAC7D,MAAMC,YAAY,GAAG,6BAA6B;AAElD,MAAMC,iBAA2B,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxC,MAAMC,OAAO,GAAGR,UAAU,CAAC,CAAC;EAE5BD,SAAS,CAAC,MAAM;IACd,MAAMU,SAAS,GAAG,IAAIC,eAAe,CAACC,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC;IAC7D,MAAMC,IAAI,GAAGL,SAAS,CAACM,GAAG,CAAC,MAAM,CAAC;IAElC,IAAID,IAAI,EAAE;MACRE,gBAAgB,CAACF,IAAI,CAAC;IACxB,CAAC,MAAM;MACL;MACAN,OAAO,CAACS,IAAI,CAAC,GAAG,CAAC;IACnB;EACF,CAAC,EAAE,CAACT,OAAO,CAAC,CAAC;EAEb,MAAMQ,gBAAgB,GAAG,MAAOF,IAAY,IAAK;IAC/C,MAAMI,QAAQ,GAAI,qCAAoC;IACtD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,QAAQ,EAAE;MACrCG,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAE,IAAIb,eAAe,CAAC;QACxBI,IAAI,EAAEA,IAAI;QACVU,SAAS,EAAErB,SAAS;QACpBsB,aAAa,EAAErB,aAAa;QAC5BsB,YAAY,EAAErB,YAAY;QAC1BsB,UAAU,EAAE;MACd,CAAC;IACH,CAAC,CAAC;IAEF,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;IAClCC,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEH,IAAI,CAACI,YAAY,CAAC;;IAEtD;IACAxB,OAAO,CAACS,IAAI,CAAC,OAAO,CAAC;EACvB,CAAC;EAED,oBACEf,OAAA;IAAA+B,QAAA,EAAK;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAEzB,CAAC;AAAC9B,EAAA,CAzCID,iBAA2B;EAAA,QACfN,UAAU;AAAA;AAAAsC,EAAA,GADtBhC,iBAA2B;AA2CjC,eAAeA,iBAAiB;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}