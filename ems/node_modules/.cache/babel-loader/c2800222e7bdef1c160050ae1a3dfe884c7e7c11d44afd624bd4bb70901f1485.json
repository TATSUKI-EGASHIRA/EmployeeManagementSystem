{"ast":null,"code":"var _jsxFileName = \"/Users/tatsuki/EmployeeManagementSystem/ems/src/UserProfile.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UserProfile() {\n  _s();\n  const {\n    userId\n  } = useParams(); // URLからuserIdを取得\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchUserData = async () => {\n      const response = await fetch(`https://sheets.googleapis.com/v4/spreadsheets/1yajpuM9YfEqlHgGbDxYVQOcHrFfJYoTho1b1qoOME6Y/values/シート1?key=YOUR_API_KEY`);\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch user data\");\n      }\n      const data = await response.json();\n      // Google SheetsのデータをパースしてuserIdに一致するユーザーを見つけます。\n      // 例えば、ユーザーIDが各行の最初の列にあると仮定します。\n      const userData = data.values.find(row => row[0] === userId);\n      setUser(userData);\n      setLoading(false);\n    };\n    fetchUserData().catch(error => {\n      console.error(\"Error fetching user data:\", error);\n      setLoading(false);\n    });\n  }, [userId]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading user data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 12\n    }, this);\n  }\n  if (!user) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No user data found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 12\n    }, this);\n  }\n\n  // user[1], user[2], ... を使ってユーザーの詳細情報を表示\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"User Profile\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Name: \", user[1]]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(UserProfile, \"AAtcRp5zw4kgD0nAoHemtUZg/9I=\", false, function () {\n  return [useParams];\n});\n_c = UserProfile;\nexport default UserProfile;\nvar _c;\n$RefreshReg$(_c, \"UserProfile\");","map":{"version":3,"names":["React","useEffect","useState","useParams","jsxDEV","_jsxDEV","UserProfile","_s","userId","user","setUser","loading","setLoading","fetchUserData","response","fetch","ok","Error","data","json","userData","values","find","row","catch","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tatsuki/EmployeeManagementSystem/ems/src/UserProfile.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nfunction UserProfile() {\n  const { userId } = useParams(); // URLからuserIdを取得\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchUserData = async () => {\n      const response = await fetch(\n        `https://sheets.googleapis.com/v4/spreadsheets/1yajpuM9YfEqlHgGbDxYVQOcHrFfJYoTho1b1qoOME6Y/values/シート1?key=YOUR_API_KEY`\n      );\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch user data\");\n      }\n      const data = await response.json();\n      // Google SheetsのデータをパースしてuserIdに一致するユーザーを見つけます。\n      // 例えば、ユーザーIDが各行の最初の列にあると仮定します。\n      const userData = data.values.find((row) => row[0] === userId);\n      setUser(userData);\n      setLoading(false);\n    };\n\n    fetchUserData().catch((error) => {\n      console.error(\"Error fetching user data:\", error);\n      setLoading(false);\n    });\n  }, [userId]);\n\n  if (loading) {\n    return <div>Loading user data...</div>;\n  }\n\n  if (!user) {\n    return <div>No user data found</div>;\n  }\n\n  // user[1], user[2], ... を使ってユーザーの詳細情報を表示\n  return (\n    <div>\n      <h1>User Profile</h1>\n      <p>Name: {user[1]}</p>\n      {/* その他のユーザー情報 */}\n    </div>\n  );\n}\n\nexport default UserProfile;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAM;IAAEC;EAAO,CAAC,GAAGL,SAAS,CAAC,CAAC,CAAC,CAAC;EAChC,MAAM,CAACM,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACd,MAAMY,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,yHACH,CAAC;MACD,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;MAC9C;MACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClC;MACA;MACA,MAAMC,QAAQ,GAAGF,IAAI,CAACG,MAAM,CAACC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAAC,CAAC,CAAC,KAAKf,MAAM,CAAC;MAC7DE,OAAO,CAACU,QAAQ,CAAC;MACjBR,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC;IAEDC,aAAa,CAAC,CAAC,CAACW,KAAK,CAAEC,KAAK,IAAK;MAC/BC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjDb,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC;EACJ,CAAC,EAAE,CAACJ,MAAM,CAAC,CAAC;EAEZ,IAAIG,OAAO,EAAE;IACX,oBAAON,OAAA;MAAAsB,QAAA,EAAK;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACxC;EAEA,IAAI,CAACtB,IAAI,EAAE;IACT,oBAAOJ,OAAA;MAAAsB,QAAA,EAAK;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACtC;;EAEA;EACA,oBACE1B,OAAA;IAAAsB,QAAA,gBACEtB,OAAA;MAAAsB,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrB1B,OAAA;MAAAsB,QAAA,GAAG,QAAM,EAAClB,IAAI,CAAC,CAAC,CAAC;IAAA;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEnB,CAAC;AAEV;AAACxB,EAAA,CA3CQD,WAAW;EAAA,QACCH,SAAS;AAAA;AAAA6B,EAAA,GADrB1B,WAAW;AA6CpB,eAAeA,WAAW;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}