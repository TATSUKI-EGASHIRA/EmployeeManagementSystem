{"ast":null,"code":"var _jsxFileName = \"/Users/tatsuki/EmployeeManagementSystem/ems/src/LoginCallback.tsx\",\n  _s = $RefreshSig$();\n// LoginCallback.tsx\nimport React, { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoginCallback = () => {\n  _s();\n  const history = useHistory();\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const code = urlParams.get('code');\n    if (code) {\n      fetchAccessToken(code);\n    } else {\n      history.push('/'); // 認証コードがない場合はホームにリダイレクト\n    }\n  }, [history]);\n  const fetchAccessToken = async code => {\n    // ここに認証コードを使用してアクセストークンを取得する処理を実装\n    // 取得したアクセストークンをlocalStorageに保存\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 10\n  }, this);\n};\n_s(LoginCallback, \"bz2N+u0mX89LO9zOCfVCA9Sa20M=\", false, function () {\n  return [useHistory];\n});\n_c = LoginCallback;\nexport default LoginCallback;\nvar _c;\n$RefreshReg$(_c, \"LoginCallback\");","map":{"version":3,"names":["React","useEffect","useHistory","jsxDEV","_jsxDEV","LoginCallback","_s","history","urlParams","URLSearchParams","window","location","search","code","get","fetchAccessToken","push","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tatsuki/EmployeeManagementSystem/ems/src/LoginCallback.tsx"],"sourcesContent":["// LoginCallback.tsx\nimport React, { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nconst LoginCallback: React.FC = () => {\n  const history = useHistory();\n\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const code = urlParams.get('code');\n\n    if (code) {\n      fetchAccessToken(code);\n    } else {\n      history.push('/'); // 認証コードがない場合はホームにリダイレクト\n    }\n  }, [history]);\n\n  const fetchAccessToken = async (code: string) => {\n    // ここに認証コードを使用してアクセストークンを取得する処理を実装\n    // 取得したアクセストークンをlocalStorageに保存\n  };\n\n  return <div>Loading...</div>;\n};\n\nexport default LoginCallback;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,UAAU,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,aAAuB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpC,MAAMC,OAAO,GAAGL,UAAU,CAAC,CAAC;EAE5BD,SAAS,CAAC,MAAM;IACd,MAAMO,SAAS,GAAG,IAAIC,eAAe,CAACC,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC;IAC7D,MAAMC,IAAI,GAAGL,SAAS,CAACM,GAAG,CAAC,MAAM,CAAC;IAElC,IAAID,IAAI,EAAE;MACRE,gBAAgB,CAACF,IAAI,CAAC;IACxB,CAAC,MAAM;MACLN,OAAO,CAACS,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;IACrB;EACF,CAAC,EAAE,CAACT,OAAO,CAAC,CAAC;EAEb,MAAMQ,gBAAgB,GAAG,MAAOF,IAAY,IAAK;IAC/C;IACA;EAAA,CACD;EAED,oBAAOT,OAAA;IAAAa,QAAA,EAAK;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAC9B,CAAC;AAACf,EAAA,CApBID,aAAuB;EAAA,QACXH,UAAU;AAAA;AAAAoB,EAAA,GADtBjB,aAAuB;AAsB7B,eAAeA,aAAa;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}